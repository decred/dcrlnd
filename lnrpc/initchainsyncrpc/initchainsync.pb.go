// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.4.0
// source: initchainsyncrpc/initchainsync.proto

package initchainsyncrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChainSyncSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChainSyncSubscription) Reset() {
	*x = ChainSyncSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initchainsyncrpc_initchainsync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainSyncSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainSyncSubscription) ProtoMessage() {}

func (x *ChainSyncSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_initchainsyncrpc_initchainsync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainSyncSubscription.ProtoReflect.Descriptor instead.
func (*ChainSyncSubscription) Descriptor() ([]byte, []int) {
	return file_initchainsyncrpc_initchainsync_proto_rawDescGZIP(), []int{0}
}

type ChainSyncUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight    int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockHash      []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockTimestamp int64  `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	Synced         bool   `protobuf:"varint,4,opt,name=synced,proto3" json:"synced,omitempty"`
}

func (x *ChainSyncUpdate) Reset() {
	*x = ChainSyncUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_initchainsyncrpc_initchainsync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainSyncUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainSyncUpdate) ProtoMessage() {}

func (x *ChainSyncUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_initchainsyncrpc_initchainsync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainSyncUpdate.ProtoReflect.Descriptor instead.
func (*ChainSyncUpdate) Descriptor() ([]byte, []int) {
	return file_initchainsyncrpc_initchainsync_proto_rawDescGZIP(), []int{1}
}

func (x *ChainSyncUpdate) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ChainSyncUpdate) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ChainSyncUpdate) GetBlockTimestamp() int64 {
	if x != nil {
		return x.BlockTimestamp
	}
	return 0
}

func (x *ChainSyncUpdate) GetSynced() bool {
	if x != nil {
		return x.Synced
	}
	return false
}

var File_initchainsyncrpc_initchainsync_proto protoreflect.FileDescriptor

var file_initchainsyncrpc_initchainsync_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x72,
	0x70, 0x63, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x72, 0x70, 0x63, 0x22, 0x17, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x32, 0x7c, 0x0a, 0x10, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12,
	0x68, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x73, 0x79, 0x6e, 0x63, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x2f, 0x64,
	0x63, 0x72, 0x6c, 0x6e, 0x64, 0x2f, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2f, 0x69, 0x6e, 0x69, 0x74,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_initchainsyncrpc_initchainsync_proto_rawDescOnce sync.Once
	file_initchainsyncrpc_initchainsync_proto_rawDescData = file_initchainsyncrpc_initchainsync_proto_rawDesc
)

func file_initchainsyncrpc_initchainsync_proto_rawDescGZIP() []byte {
	file_initchainsyncrpc_initchainsync_proto_rawDescOnce.Do(func() {
		file_initchainsyncrpc_initchainsync_proto_rawDescData = protoimpl.X.CompressGZIP(file_initchainsyncrpc_initchainsync_proto_rawDescData)
	})
	return file_initchainsyncrpc_initchainsync_proto_rawDescData
}

var file_initchainsyncrpc_initchainsync_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_initchainsyncrpc_initchainsync_proto_goTypes = []interface{}{
	(*ChainSyncSubscription)(nil), // 0: initialchainsyncrpc.ChainSyncSubscription
	(*ChainSyncUpdate)(nil),       // 1: initialchainsyncrpc.ChainSyncUpdate
}
var file_initchainsyncrpc_initchainsync_proto_depIdxs = []int32{
	0, // 0: initialchainsyncrpc.InitialChainSync.SubscribeChainSync:input_type -> initialchainsyncrpc.ChainSyncSubscription
	1, // 1: initialchainsyncrpc.InitialChainSync.SubscribeChainSync:output_type -> initialchainsyncrpc.ChainSyncUpdate
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_initchainsyncrpc_initchainsync_proto_init() }
func file_initchainsyncrpc_initchainsync_proto_init() {
	if File_initchainsyncrpc_initchainsync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_initchainsyncrpc_initchainsync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainSyncSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_initchainsyncrpc_initchainsync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainSyncUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_initchainsyncrpc_initchainsync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_initchainsyncrpc_initchainsync_proto_goTypes,
		DependencyIndexes: file_initchainsyncrpc_initchainsync_proto_depIdxs,
		MessageInfos:      file_initchainsyncrpc_initchainsync_proto_msgTypes,
	}.Build()
	File_initchainsyncrpc_initchainsync_proto = out.File
	file_initchainsyncrpc_initchainsync_proto_rawDesc = nil
	file_initchainsyncrpc_initchainsync_proto_goTypes = nil
	file_initchainsyncrpc_initchainsync_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InitialChainSyncClient is the client API for InitialChainSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InitialChainSyncClient interface {
	// SubscribeChainSync is a streaming call that registers a client to receive
	// updates about the progress of the sync procedure. If an update message is
	// received with synced = true, then this will be the last update sent and
	// the server will be shutdown.
	SubscribeChainSync(ctx context.Context, in *ChainSyncSubscription, opts ...grpc.CallOption) (InitialChainSync_SubscribeChainSyncClient, error)
}

type initialChainSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewInitialChainSyncClient(cc grpc.ClientConnInterface) InitialChainSyncClient {
	return &initialChainSyncClient{cc}
}

func (c *initialChainSyncClient) SubscribeChainSync(ctx context.Context, in *ChainSyncSubscription, opts ...grpc.CallOption) (InitialChainSync_SubscribeChainSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InitialChainSync_serviceDesc.Streams[0], "/initialchainsyncrpc.InitialChainSync/SubscribeChainSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &initialChainSyncSubscribeChainSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InitialChainSync_SubscribeChainSyncClient interface {
	Recv() (*ChainSyncUpdate, error)
	grpc.ClientStream
}

type initialChainSyncSubscribeChainSyncClient struct {
	grpc.ClientStream
}

func (x *initialChainSyncSubscribeChainSyncClient) Recv() (*ChainSyncUpdate, error) {
	m := new(ChainSyncUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InitialChainSyncServer is the server API for InitialChainSync service.
type InitialChainSyncServer interface {
	// SubscribeChainSync is a streaming call that registers a client to receive
	// updates about the progress of the sync procedure. If an update message is
	// received with synced = true, then this will be the last update sent and
	// the server will be shutdown.
	SubscribeChainSync(*ChainSyncSubscription, InitialChainSync_SubscribeChainSyncServer) error
}

// UnimplementedInitialChainSyncServer can be embedded to have forward compatible implementations.
type UnimplementedInitialChainSyncServer struct {
}

func (*UnimplementedInitialChainSyncServer) SubscribeChainSync(*ChainSyncSubscription, InitialChainSync_SubscribeChainSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChainSync not implemented")
}

func RegisterInitialChainSyncServer(s *grpc.Server, srv InitialChainSyncServer) {
	s.RegisterService(&_InitialChainSync_serviceDesc, srv)
}

func _InitialChainSync_SubscribeChainSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChainSyncSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InitialChainSyncServer).SubscribeChainSync(m, &initialChainSyncSubscribeChainSyncServer{stream})
}

type InitialChainSync_SubscribeChainSyncServer interface {
	Send(*ChainSyncUpdate) error
	grpc.ServerStream
}

type initialChainSyncSubscribeChainSyncServer struct {
	grpc.ServerStream
}

func (x *initialChainSyncSubscribeChainSyncServer) Send(m *ChainSyncUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _InitialChainSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "initialchainsyncrpc.InitialChainSync",
	HandlerType: (*InitialChainSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeChainSync",
			Handler:       _InitialChainSync_SubscribeChainSync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "initchainsyncrpc/initchainsync.proto",
}
